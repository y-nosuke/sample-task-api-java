import com.diffplug.spotless.LineEnding
import org.h2.Driver
import org.seasar.doma.gradle.codegen.jdbc.SimpleDataSource

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.h2database:h2:1.3.175'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id "org.seasar.doma.compile" version '1.1.1-beta1'
	id "org.seasar.doma.codegen" version '1.1.1-beta1'
	id "org.openapi.generator" version '7.0.0-beta'
	id "org.flywaydb.flyway" version '9.21.1'
	id "com.diffplug.spotless" version '6.20.0'
}

group = 'jp.physicist00'
version = '0.1.0'

java {
	sourceCompatibility = '20'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'

	// lombok & MapStruct
	var mapstructVersion="1.5.5.Final"
	compileOnly 'org.projectlombok:lombok'
	compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", 'org.projectlombok:lombok'

	// Doma2
	var domaSpringBootVersion="1.4.0"
	var domaVersion="2.38.0"
	implementation "org.seasar.doma.boot:doma-spring-boot-starter:$domaSpringBootVersion"
	implementation "org.seasar.doma:doma-core:$domaVersion"
	annotationProcessor "org.seasar.doma:doma-processor:$domaVersion"
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	// flyway
	implementation 'org.flywaydb:flyway-core'

	// OpenAPI
	implementation 'io.swagger:swagger-annotations:1.5.0'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.1'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

/***************************************************************
 * Spotless
 ***************************************************************/
spotless {
	encoding 'UTF-8'
	lineEndings LineEnding.UNIX

	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'

		indentWithSpaces(2)
		endWithNewline()
	}

	java {
		googleJavaFormat('1.17.0').aosp()
		indentWithTabs()
		indentWithSpaces(2)
//	licenseHeader '/* (C)$YEAR */'
	}
}

/***************************************************************
 * Open API
 ***************************************************************/
compileJava.dependsOn tasks.openApiGenerate
sourceSets.main.java.srcDir "$buildDir/generated/src/main/java"
sourceSets.main.resources.srcDirs

openApiGenerate {
	def basePackage = 'com.sample.task'
	def infraPackage = "${basePackage}.interfaces.gateway"
	generatorName = "spring"
	inputSpec = "$rootDir/sample-task-openapi/openapi.yaml".toString()
	outputDir = "$buildDir/generated".toString()
	apiPackage = "${infraPackage}.api"
	invokerPackage = "${infraPackage}.api.invoker"
	modelPackage = "${infraPackage}.api.model"
	configOptions.set([
			dateLibrary  : "java8",
			interfaceOnly: "true"
	])
	globalProperties.set([
			modelDocs: 'false'
	])
}

/***************************************************************
 * Doma CodeGen
 ***************************************************************/
def _url = "jdbc:h2:file:$projectDir/app_domagen/db"
def _user = ''
def _password = ''

domaCodeGen {
	dev {
		def basePackage = 'com.sample.task'
		url = _url
		user = _user
		password = _password
		templateDir = file("src/main/resources/doma/templates")
		sourceDir = file("$buildDir/generated/src/main/java")
		resourceDir = file("$buildDir/generated/src/main/resources")
		entity {
			packageName = "${basePackage}.interfaces.gateway.entity"
			entityPropertyClassNamesFile = file("$rootDir/src/main/resources/doma.name.config")
			overwrite = true
			overwriteListener = true
		}
		dao {
			packageName = "${basePackage}.interfaces.gateway.dao"
			overwrite = true
		}
		sql {
			overwrite = true
		}
	}
}

tasks.register('createDB') {
	group = 'doma code generation'
	doLast {
		def ds = new SimpleDataSource()
		ds.setDriver(new Driver())
		ds.setUrl(_url)
		ds.setUser(_user)
		ds.setPassword(_password)

		FileTree tree = fileTree(dir: 'src/main/resources/db/migration',
				include: '*_create_table_*.sql')
		tree.each {
			def sql = it.text

			ds.connection.withCloseable {
				it.createStatement().withCloseable {
					it.execute(sql)
				}
			}
		}
	}
}

tasks.register('copySQL', Copy) {
	group = 'doma code generation'
	from "$buildDir/generated/src/main/resources/META-INF"
	into "$buildDir/classes/java/main/META-INF"
}

tasks.domaCodeGenDevDao.dependsOn createDB
tasks.domaCodeGenDevEntity.dependsOn createDB
tasks.domaCodeGenDevSql.dependsOn createDB
compileJava.dependsOn tasks.domaCodeGenDevDao
compileJava.dependsOn tasks.domaCodeGenDevEntity
compileJava.dependsOn tasks.domaCodeGenDevSql
tasks.copySQL.mustRunAfter tasks.domaCodeGenDevSql
compileJava.dependsOn tasks.copySQL
